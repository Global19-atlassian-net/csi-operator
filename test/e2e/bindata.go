// Code generated by go-bindata.
// sources:
// test/e2e/manifests/hostpath.yaml
// DO NOT EDIT!

package e2e

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hostpathYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4d\x6b\xdb\x4c\x10\xbe\xeb\x57\xec\xe1\x3d\xbc\x3d\x48\xb6\x03\x2d\x65\x21\x87\xc6\x72\xc1\x14\x3b\x22\x4e\x72\x0d\x1b\x69\x2c\x2f\xde\xaf\xee\xae\x54\xeb\xdf\x77\x56\x8a\x64\xc9\x86\x96\x42\xe9\xa1\xd4\x60\x81\x66\x66\xe7\xe3\x79\x9e\xd1\x32\xc3\x9f\xc1\x3a\xae\x15\x25\xb9\xe3\x85\xe5\x35\xd8\xc4\x79\x6d\x59\x09\x89\x36\xa0\xdc\x81\xef\x7d\xc2\xf5\xac\x5e\x30\x61\x0e\x6c\x11\x1d\xb9\x2a\x28\x59\xee\xd6\x69\x1b\x9d\x82\x11\xba\x91\xa0\x7c\x24\xc1\xb3\x82\x79\x46\x23\x42\x14\x93\x40\xc9\x41\x3b\x6f\x98\x3f\x44\xce\x40\x1e\xcc\x5d\x85\x6d\xeb\xc4\x82\xf1\x10\x30\xf8\x96\x5a\x79\xab\x85\x00\xfb\x08\xd2\x08\xe6\x21\x9c\x23\xa4\xcf\x10\x7e\x39\xc6\x30\xae\xb0\xf3\xde\x12\x13\x66\xcb\xe1\x2d\xbc\xc7\x71\x7d\xfb\x7e\xf2\x0e\xaa\x30\x9a\x2b\x7f\xfb\xdf\xff\xd8\xfd\xcb\x6a\x9b\x66\xf7\xeb\xed\xe3\xbb\x49\x90\xd2\x05\xf0\x02\x43\xbe\x3c\xdd\xad\x5e\xb6\xf7\x29\x3e\x3e\x6d\x56\xe7\x20\x50\xf5\xb8\x4c\x37\xe7\x38\xdf\xe0\x24\xa4\x66\xa2\x42\x6f\xa5\xf8\x89\xce\x66\x33\x1c\x38\xfc\x13\xa7\xf3\xe3\x55\x8a\x69\xbd\xcb\x24\x9f\xad\x96\x74\x64\x24\x64\xcf\x41\x14\x0f\xb0\x9f\x5a\x09\x19\x53\x5a\x2f\x2e\x9c\xed\xa1\x0c\xf1\xa6\x2d\x9e\x49\x98\x36\x90\x31\x84\x71\x89\xc4\x53\xf2\xb5\x62\x4d\x20\xfd\xf8\xd1\x85\xa6\x7b\x96\x8c\xa8\x4a\xae\x68\x3d\x4f\x6e\x92\xf9\xf4\x4c\x56\x09\x91\x69\xc1\xf3\x86\x92\xf5\x7e\xab\x7d\x66\xc1\x05\x51\xf4\x51\x6a\xe0\xbc\xe3\x79\x70\xd4\x5a\x54\x12\x36\xba\x52\xde\x5d\x23\xdb\x97\x8e\xad\xd6\x7e\x34\x8d\x0c\xf1\xdd\x24\x33\x2f\xcd\xe0\x71\x90\x57\x96\xfb\x26\xc8\x08\x4e\x7e\x8c\x8e\xc1\xba\x5c\x40\x09\x28\x5f\x6f\xab\x7e\xe8\xae\xfe\x48\x49\x3f\x2a\x1c\xac\x6d\xd5\x71\xde\xeb\x2e\x08\xf1\x8d\xc1\x24\x29\xb7\x90\xe3\x36\x35\x67\x7d\x67\x28\x7f\x44\xfd\x9f\xb8\xcf\x49\xfe\x62\x71\xff\xba\x1c\x7f\xef\x42\xfc\x61\x71\xef\x90\x7c\xf0\x18\x7f\xa1\x86\x40\xc5\x93\xc1\xbb\x01\x76\xde\xe2\xb3\x44\x20\x1f\xf0\x23\xcf\x55\x19\x05\x24\xf4\x2b\xe0\x5e\x70\x5d\xec\x00\xe5\x5f\x38\x4a\x3e\xcc\x43\xd6\xb7\x9b\x68\x29\x98\x73\xfd\xc6\xbc\x0d\x13\x93\xf1\x75\x33\xa6\xc1\xe5\xbd\x32\x0a\xd8\xb3\x4a\xf8\x09\xbe\xd8\xb3\x60\x5c\xf6\x74\xa6\x20\xc0\xf7\x3e\x26\x84\xfe\xf6\xdc\x42\xb6\x3a\x19\xa6\x3a\xa1\x5d\x7d\x2b\xee\xf0\x06\xc4\xce\x37\x38\x14\xea\x41\x4a\x28\x38\xf6\x15\xfd\xb4\xad\x9b\xa8\xc7\xd4\xa2\xc5\x8f\x36\x1c\xc5\xab\xf5\x82\x92\x57\x66\x17\xd1\xf7\x00\x00\x00\xff\xff\x3b\x29\x35\xcf\x95\x07\x00\x00")

func hostpathYamlBytes() ([]byte, error) {
	return bindataRead(
		_hostpathYaml,
		"hostpath.yaml",
	)
}

func hostpathYaml() (*asset, error) {
	bytes, err := hostpathYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hostpath.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hostpath.yaml": hostpathYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hostpath.yaml": {hostpathYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

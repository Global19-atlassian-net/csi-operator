// Code generated by go-bindata.
// sources:
// pkg/generated/manifests/default-config.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x4f\xeb\x48\x10\xbc\xfb\x57\xb4\xe0\x02\x52\xe2\x80\x76\x0f\x2b\xdf\x56\xc0\x01\x2d\x42\xab\xb0\x7f\xa0\x63\x77\x92\x11\xe3\x19\x33\x1f\xc9\xfa\xdf\x6f\xf5\xd8\x21\xd9\xa7\xc7\xd3\x7b\x52\x10\x89\xa7\xbb\xab\xba\xaa\xc6\xd7\xf4\xcf\xde\x44\xc2\x27\xed\x85\x3a\xd9\x72\xb6\x89\x5a\xef\xb6\x66\x97\x03\x27\xe3\x1d\x6d\x8d\x95\x05\x9e\xf5\x03\xbe\x74\x64\x5c\xa9\xf5\x83\xe0\xdc\x87\xba\xba\xa6\x3f\xad\xa5\x98\x87\xc1\x87\xa4\x05\x49\xfa\x48\x1c\x84\xac\x89\xfa\x60\x23\xd6\x1f\x17\x94\xfc\x4e\xd0\x19\xe8\x68\xd2\x5e\x67\x98\x00\xc4\xd8\x06\x33\x28\x4e\x5d\x61\xd2\xe3\xcc\xc0\xf4\xbc\x13\x90\xf2\x94\xa3\xd0\xd6\x07\x3a\x70\x30\x3e\x47\x92\x7f\x93\x04\xc7\x96\xfe\xca\x1b\x7c\x91\x84\x32\xe5\xe6\x9d\xb8\x14\xeb\x6a\xde\xe1\xb9\x0c\x68\x2a\x22\x4e\x89\x5b\xc0\x96\x27\x0d\x5d\x7d\x64\x1e\x6b\xe3\x57\xef\x7f\xc4\x36\x9a\x15\xfe\x96\xa7\x92\xe6\x70\x57\xff\x56\xdf\x5d\xa1\x6b\x08\xfe\x60\x22\x68\xfd\xb0\xf1\xa2\x6a\xea\xbd\xd7\xde\x2e\x98\x83\x84\xb5\xec\xb0\x7e\xe0\xaf\xfa\xa7\xaa\x65\x38\x95\x5d\x80\x5b\x9c\x38\x89\xf1\xef\xe0\x37\xf2\x45\xfb\xa9\x66\xd0\x1a\xed\xfd\x5d\xc1\x21\xe1\x0b\x43\x6f\x8a\x62\xa5\x85\x3d\xd0\x99\x13\xf5\x9c\xb0\x5f\x24\xe7\x21\x38\x1d\xb1\xaa\xd0\xe0\xbb\x38\x59\x01\xbb\x53\xf0\xd6\xc2\x9a\xb3\x92\x98\x74\x73\xb1\xde\xe2\x53\xc7\xdb\x62\x2d\x5b\x78\x0a\x6f\xe1\x50\xc8\xae\x46\x8c\x24\xce\x33\xd3\x38\x98\x16\xe7\x23\xed\xf9\x20\x14\x7d\x2f\x18\x36\x60\x5d\xe4\x67\x87\x1e\x6e\x5b\x10\xd7\x56\x0d\x52\x04\x4b\x6c\x48\x1b\x6e\xdf\xc5\x95\x89\x13\xd4\xaa\x13\xfd\x47\x8c\x87\x6d\x10\x4e\x82\x27\x16\x86\x63\xda\xc1\xdb\xdc\x63\x15\x3d\x53\x00\x04\x69\xb0\x7e\xec\x95\x39\x05\xf9\xc8\x06\x1c\x63\x46\xf7\x44\xa9\xb0\x24\x84\xb9\x93\x0e\xe4\x34\x95\x45\x8b\x05\x66\x45\x00\x96\x5f\x65\xfb\xe0\x7b\x13\x35\xb4\x23\x86\x6b\xfa\x10\x52\x5f\xa4\x4b\xd3\x3e\xac\x23\x27\x59\xf7\x1c\x95\x59\x07\x54\xc3\x56\x25\xfb\xfe\x4e\x75\x65\xdc\x36\x30\x6c\xce\x6d\xca\x41\x5e\x01\xf6\x36\x1b\xa4\x11\xbd\xa6\xa7\x7e\x48\xa3\x62\xce\xf1\x5d\x14\xbe\xec\xc6\xe2\x95\xda\xfa\x9a\x7b\xe4\x9d\xfc\x16\xeb\x0d\x16\x3b\x44\xfd\x7e\x61\x5d\x59\xf4\x0b\xcb\xf4\x92\xde\xbc\x08\x77\xa8\x2b\xb8\x7a\xaf\xcd\xb4\xd4\xf9\xe2\x3a\x7f\xbc\xd5\x0b\x74\x52\x72\x3d\x03\x35\x74\x5f\x18\x30\x74\x06\xe6\x83\xcd\xb8\xd6\x61\xed\xad\x4c\x32\xec\x10\xc5\x48\x0f\x6f\xcf\x73\xf2\x27\x2a\x6a\xcd\xc5\x1d\x8d\xa6\x93\x96\x03\xe6\x28\x67\x36\x4e\xa9\x38\x9f\x77\xb0\x48\x02\x34\x57\xd2\x27\xa7\xea\xaa\x3d\x83\x28\x6e\x43\x71\xc4\xef\xbe\xc1\x6b\xc7\xc5\xbd\xd9\xa6\x46\xef\xdf\x84\xf7\x93\xe4\x3e\xdf\x1c\x27\x59\x0a\xc5\x0b\xc1\x34\xa5\xff\xa7\xd2\x79\xb2\xdf\xaa\x86\x0f\x32\xe6\x80\x17\x07\x6e\xa5\xae\xa6\x8a\xa7\xb9\xe0\xe1\x17\x88\x2f\xcf\xf6\x2d\xa7\x29\xcb\x13\x8e\xee\xb4\xf6\xb0\x07\x3b\xbd\x43\x45\xe4\x9e\x3a\x4e\x4c\x1d\x92\xad\xb9\x19\x35\xcd\xb8\x65\x53\x8e\xeb\x6a\x2e\xd2\x9e\x47\x13\x1a\x5a\xe1\x85\x89\x97\xc4\x66\x35\x1f\x54\xff\x05\x00\x00\xff\xff\x28\x17\x94\x27\xeb\x05\x00\x00")

func defaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_defaultConfigYaml,
		"default-config.yaml",
	)
}

func defaultConfigYaml() (*asset, error) {
	bytes, err := defaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default-config.yaml": defaultConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default-config.yaml": {defaultConfigYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

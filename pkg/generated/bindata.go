// Code generated by go-bindata.
// sources:
// pkg/generated/manifests/default-config.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcd\x4e\xe3\x48\x10\xbe\xfb\x29\x4a\x70\x01\x29\x71\x40\x7b\x59\xf9\xb6\x02\x0e\x68\x11\x5a\x85\x7d\x81\x8a\x5d\x49\x5a\xb4\xbb\x4d\xff\x24\xeb\xb7\xdf\xaf\xda\x0e\xc9\x8c\x86\xd1\x8c\x14\x44\xe2\xae\x9f\xef\xaf\x7d\x4d\xff\xee\x4d\x24\x7c\xd2\x5e\xa8\x93\x2d\x67\x9b\xa8\xf5\x6e\x6b\x76\x39\x70\x32\xde\xd1\xd6\x58\x59\xe0\x59\x3f\xe0\x4b\x47\xc6\x95\x5a\x3f\x08\xce\x7d\xa8\xab\x6b\xfa\xcb\x5a\x8a\x79\x18\x7c\x48\x5a\x90\xa4\x8f\xc4\x41\xc8\x9a\xa8\x0f\x36\x62\xfd\x71\x41\xc9\xef\x04\x9d\x81\x8e\x26\xed\x75\x86\x09\xd8\x18\xdb\x60\x06\xdd\x53\x57\x98\xf4\x38\x23\x30\x3d\xef\x04\xa0\x3c\xe5\x28\xb4\xf5\x81\x0e\x1c\x8c\xcf\x91\xe4\xbf\x24\xc1\xb1\xa5\xbf\xf3\x06\x5f\x24\xa1\x4c\xb1\x79\x27\x2e\xc5\xba\x9a\x39\x3c\x97\x01\x4d\x45\xc4\x29\x71\x8b\xb5\xe5\x49\x43\x57\x1f\x99\xc7\xda\xf8\xd5\xfb\x9f\xb1\x8d\x66\x85\xbf\xe5\xa9\xa4\x39\xdc\xd5\x7f\xd4\x77\x57\xe8\x1a\x82\x3f\x98\x08\x58\x3f\x6d\xbc\xa8\x9a\x7a\xef\xb5\xb7\x0b\xe6\x20\x61\x2d\x3b\xd0\x0f\xfc\x55\xff\x54\xb5\x0c\xa7\xb2\x8b\xe5\x16\x27\x4e\x62\xfc\x27\xf8\x8d\x7c\xd1\x7e\xaa\x19\xb4\xa6\xb1\x0c\x1d\xd2\x95\x4a\xf8\xc2\xd0\x9b\xa2\x58\x69\x61\x0f\x74\xe6\x44\x3d\x27\xf0\x8b\xe4\x3c\x04\xa7\x23\xa8\x0a\x0d\xbe\x8b\x93\x15\xb0\x3b\x05\x6f\x2d\xac\x39\x2b\x89\x49\x37\x17\xf4\x16\x9f\x3a\xde\x16\x6b\xd9\xc2\x53\x78\x0b\x87\x42\x76\x35\x62\x24\x71\x9e\x99\xc6\xc1\xb4\x38\x1f\x69\xcf\x07\xa1\xe8\x7b\xc1\xb0\x01\x74\x91\x9f\x1d\x7a\xb8\x6d\x01\x5c\x5b\x35\x48\x11\x28\xc1\x90\x36\xdc\xbe\x8b\x2b\x13\xa7\x55\xab\x4e\xf4\x1f\x31\x1e\xb6\x41\xc0\x10\x4f\x2c\x0c\xc7\xb4\x83\xb7\xb9\x07\x15\x3d\xd3\x05\x08\xd2\x60\xfd\xd8\x2b\x72\x0a\xf2\x91\x0d\x30\xc6\x8c\xee\x09\x52\x41\x49\x08\x73\x27\x1d\xc0\x69\x2a\x8b\x16\x0b\xcc\x8a\x58\x58\x7e\x15\xf6\xc1\xf7\x26\x6a\x68\x47\x0c\xd7\xf4\x21\xa4\xbe\x48\x97\x26\x3e\xac\x23\x27\x59\xf7\x1c\x15\x59\x87\xad\x86\xad\x4a\xf6\x63\x4e\x75\x65\xdc\x36\x30\x6c\xce\x6d\xca\x41\x5e\xb1\xec\x6d\x36\x48\x23\x7a\x4d\x4f\xfd\x90\x46\xdd\x39\xc7\x77\x51\xf0\xb2\x1b\x8b\x57\x6a\xeb\x6b\xee\x91\x77\xf2\x5b\xd0\x1b\x2c\x38\x44\xfd\x7e\x61\x5d\x21\xfa\x85\x65\x7a\x49\x6f\x5e\x84\x3b\xd4\x95\xbd\x7a\xaf\xcd\x44\xea\x7c\x71\x9d\x3f\xde\xea\x05\x3a\x29\xb9\x9e\x17\x35\x74\x5f\x10\x30\x74\xc6\xce\x07\x9b\x71\xad\xc3\xda\x5b\x99\x64\xd8\x21\x8a\x91\x1e\xde\x9e\xe7\xe4\x4f\x50\xd4\x9a\x8b\x3b\x1a\x4d\x27\x2d\x07\xcc\x51\xcc\x6c\x9c\x42\x71\x3e\xef\x60\x91\x04\x68\xae\xa0\x4f\x4e\xd5\x55\x7b\x5e\xa2\x7b\x1b\x8a\x23\x7e\xf7\x0d\x5e\x3b\x2e\xee\xcd\x36\x35\x7a\xff\xa6\x7d\xbf\x08\xee\xf3\xcd\x71\x92\xa5\x40\xbc\x10\x4c\x53\xfa\x2d\x94\xce\x93\xfd\x5e\x35\x7c\x90\x31\x87\x7d\x71\xe0\x56\xea\x6a\xaa\x78\x9a\x0b\x1e\x7e\x03\xf8\xf2\x6c\xdf\x72\x9a\xb2\x3c\xed\x51\x4e\x6b\x0f\x7b\xc0\xe9\x1d\x2a\x22\xf7\xd4\x71\x62\xea\x90\x6c\xcd\xcd\xa8\x69\xc6\x2d\x9b\x72\x5c\x57\x73\x91\xf6\x3c\x9a\xd0\xd0\x0a\x2f\x4c\xbc\x24\x36\xab\xf9\xa0\xfa\x3f\x00\x00\xff\xff\xf7\x95\x74\x99\xeb\x05\x00\x00")

func defaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_defaultConfigYaml,
		"default-config.yaml",
	)
}

func defaultConfigYaml() (*asset, error) {
	bytes, err := defaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default-config.yaml": defaultConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default-config.yaml": {defaultConfigYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

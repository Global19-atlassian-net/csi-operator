// Code generated by go-bindata.
// sources:
// pkg/generated/manifests/default-config.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x5f\x4f\xdb\x4e\x10\x7c\xf7\xa7\x58\xc1\xcb\x0f\x89\x38\xa0\xdf\x4b\x95\x57\xe0\x01\x15\xa1\x2a\xf4\x0b\x6c\x7c\x9b\xe4\xc4\xd9\x67\xee\x4f\xa8\xbf\x7d\x67\xef\x1c\x48\xab\xa6\xaa\x04\x89\xe3\xdb\x9d\x9d\x99\x1d\xfb\x92\xee\x65\xcb\xd9\x25\xb2\x3d\xef\x24\x52\xf2\x94\xa3\xd0\xd6\x07\x3a\x70\xb0\x3e\x47\x92\x1f\x49\xc2\xc0\x8e\xbe\xe6\x0d\x2e\x24\xa1\xac\xf3\xfd\xe8\x07\x19\x52\x6c\x1b\x53\x11\x1e\x0b\xc0\xaa\x21\xe2\x94\xb8\xdb\x4b\x28\x77\x56\x74\xf1\x96\x79\x6a\xad\x5f\xbe\x7e\x89\x5d\xb4\x4b\xfc\x2f\x8e\x25\xab\xc3\x4d\xfb\x7f\x7b\x73\x81\xae\x31\xf8\x83\x8d\x16\xa8\x7f\x6b\x3c\xa9\xaa\xbd\xb7\xda\x6b\x82\x3d\x48\x58\xcb\xce\xc6\x14\xf8\x5c\x7f\xad\x5a\x84\x63\xd9\xc9\x70\x87\x93\x41\x62\xfc\x16\xfc\x46\xce\xb4\x1f\x6b\x46\xad\x59\x39\x86\x0f\xe9\xa2\x69\x2e\xe9\x89\x37\xe2\x28\x8a\x93\x2e\xc1\xb7\xb4\xe7\x44\x3d\x27\xe8\x8b\x34\x78\x83\xcf\x77\x48\x15\x1a\xbd\xc1\xa5\x4d\x7b\xd8\x37\xa4\xe0\x9d\x93\x70\xe2\x24\x90\xfe\x3b\x91\x77\xfd\xe1\xe3\x15\x31\xba\xd9\x39\xff\x2e\x46\x37\x14\xf2\xd0\xd2\x77\xc0\xcf\x98\x69\x1a\x6d\x87\xf3\x89\xf6\x7c\x10\x8a\xbe\x17\x80\x8d\x90\x6b\x9d\xec\xd0\xc3\x5d\x07\xe2\xda\x9a\xf6\x38\x07\x4b\x28\xa4\x0d\x77\xaf\x32\x14\xc4\x3a\x6a\x69\x44\xbf\x88\x71\xb3\x0b\x02\x85\xb8\xe3\xb0\x70\xa0\x1d\xbc\xcb\x3d\xa4\xe8\x99\x0e\x20\x23\xa3\xf3\x53\xaf\xcc\x29\xc8\x5b\xb6\xe0\x18\x33\xba\x2b\xa5\xc2\x92\xfc\x80\x3a\x03\x72\x09\x2c\x8a\x17\xd7\xc0\x8a\x18\x58\x7e\x15\xf5\xc1\xf7\x36\xe2\x78\x33\x01\x5c\xd3\x17\xc8\xf8\x62\x5d\xaa\x7a\x58\x21\xab\xad\x7b\x8e\xca\xcc\x60\xaa\x65\xa7\x96\xfd\x59\x53\xdb\xd8\x61\x1b\x18\x6b\xce\x5d\xca\x41\x9e\x31\xec\x65\x5e\x90\x46\xf4\x92\x1e\xfa\x31\x4d\x3a\x73\x8e\xef\x75\xe1\xcb\xc3\x54\x76\xa5\x6b\x7d\xce\x3d\xf2\x4e\x7e\x0b\x79\xa3\x83\x86\xa8\xd7\x27\xab\x2b\x42\xcf\xac\xac\xd5\x6d\x3e\x09\x1b\xd4\x95\xb9\x28\x20\x5b\x45\xc5\x3c\x8e\x3e\x54\x47\xde\xaf\xf4\x01\x3a\x3a\xb9\x9e\x07\xad\xe8\xb6\x30\x60\xf8\x8c\x99\x77\x2e\x47\x3c\x83\x6b\xef\xa4\xda\xb0\x43\x14\x23\xdd\xbd\x3c\xce\xc9\xaf\x54\x74\x35\x27\xcf\x68\xb4\x46\x3a\x0e\xc0\x51\xce\x6c\x07\xa5\x32\xf8\xbc\xc3\x8a\x24\xc0\x73\x25\x7d\xdc\x54\xdb\x74\x9f\x43\x74\xee\x8a\x90\xf9\x8a\xfe\x8f\x54\x3e\xde\x13\x47\x13\x0a\xa1\x13\x7b\x34\x93\xbf\x0e\x36\x9e\xdc\xef\x1e\xe1\x0f\x89\x1a\x30\x2f\x8e\xdc\x49\xdb\xd4\x8a\x87\xb9\xe0\xee\x2c\xcd\xc5\xe7\x6a\x16\xb5\x67\x71\x44\x55\x05\x6b\x0f\xeb\xa1\xe0\x15\x0e\x21\xd3\x64\x38\x31\x19\xa4\x56\x33\x31\x69\x52\xf1\x04\xd5\x8c\xb6\xcd\x5c\xa4\x3d\xf7\x36\xac\x68\x89\x97\x21\x5e\x00\x9b\xe5\x7c\xd0\xfc\x0c\x00\x00\xff\xff\x32\x9b\x8b\x94\x39\x05\x00\x00")

func defaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_defaultConfigYaml,
		"default-config.yaml",
	)
}

func defaultConfigYaml() (*asset, error) {
	bytes, err := defaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default-config.yaml": defaultConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default-config.yaml": {defaultConfigYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
